import PushNotification from './config'

import {
  CLIENT_SET,
  CLIENT_UNSET,
  SET_INITIAL_LABELS,
  SET_ALERT,
  SET_ROOM_MESSAGE,
  SET_ALERT_MESSAGE,
} from './types'

const initialState = {
  // id: null,
  token: null,
  initialLabels: null,
  alert: false,
  messages: {},
  pmid: 0,
  unreadMessages: {},
  wx: null,
}

const reducer = function clientReducer(state = initialState, action) {
  switch (action.type) {
    case CLIENT_SET:
      return {
        ...state,
        token: action.token,
      }
    case CLIENT_UNSET:
      return {
        ...state,
        token: null,
      }
    case SET_INITIAL_LABELS:
      return {
        ...state,
        initialLabels: action.initialLabels,
      }
    case SET_ALERT:
      return {
        ...state,
        alert: action.alert,
      }
    case SET_ROOM_MESSAGE: {
      const messages = {}
      const unreadMessages = {}
      const data = action.message
      const pmid = data.id
      console.log(data)
      const roomId = data.room
      if (state.messages[roomId] !== undefined) {
        messages[roomId] = state.messages[roomId].concat(data)
      } else messages[roomId] = [data]
      if (state.unreadMessages[roomId] !== undefined) {
        unreadMessages[roomId] = state.unreadMessages[roomId] + 1
      } else unreadMessages[roomId] = 1


      PushNotification.localNotification({
        id: roomId,
        /* Android Only Properties
        id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "My Notification Ticker", // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        subText: "This is a subText", // (optional) default: none
        color: "red", // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: "group", // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification

        /* iOS only properties*/
        // alertAction: // (optional) default: view
        // category: // (optional) default: null
        userInfo: { roomId }, // (optional) default: null (object containing additional notification data)
        /* iOS and Android properties */
        title: '新消息', // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
        message: `${data.sender.name}：${data.text}`, // (required)
        // playSound: true, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        // number: global.unread, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
        // actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more

      });
      PushNotification.setApplicationIconBadgeNumber(
        Object.values(unreadMessages).reduce((a, b) => a + b),
      )
      return {
        ...state,
        messages,
        unreadMessages,
      }
    }
    case SET_ALERT_MESSAGE:
      return {
        ...state,
        messages: action.messages,
      }
    default:
      return state
  }
}

export default reducer
